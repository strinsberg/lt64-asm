(lt64-asm
  (static
    (:word nums 10 1 8 3 7 2 4 89 0 2 5)
    (:word-d i 1 1))

  (instruct
     (:load nums)              ;; set first num to the current max on stack

     (:label loop)              ;; start of loop over nums
     (:add-d nums +i)            ;; get address of next num
     (:load)                    ;; load nums[i]
     (:call 2 max)              ;; get max of current max and num[i]
     (:eq-d +i 10)              ;; check to see if all numbers are processed
     (:branch end-loop)         ;; if done exit loop
     (:add-d +i 1)              ;; increment i
     (:push-d i)                ;; push address of i
     (:store-d)                 ;; store new value of i
     (:jump loop)               ;; start loop over

     (:label end-loop)
     (:print)                   ;; print max num stored on top of stack
     (:print-cr)                ;; print newline
     (:halt)                    ;; end prog

     (:label max)               ;; proc to find max(word a, word b)
     (:get 0)                   ;; load a
     (:get 1)                   ;; load b
     (:lt)                      ;; check if a < b
     (:branch b-bigger)         ;; true: end and return b (top of stack)
     (:get 0)                   ;; false: get a on the stack and return
     (:ret 1)
     (:label b-bigger)
     (:get 1)
     (:ret 1))
)
